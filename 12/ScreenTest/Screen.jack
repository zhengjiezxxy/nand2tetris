// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    
    static int screenBase;
    static int screenSize;
    static int widthpixel;
    static int heightpixel;
    static boolean bColor;

    /** Initializes the Screen. */
    function void init() {
      let screenBase = 16384;
      let screenSize = 8*1024; //8k
      let widthpixel = 512;
      let heightpixel = 256;
      let bColor = true; //black;

      return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
      var int i; //loop counter
      let i = 0;
      while(i<screenSize)
      {
        do Memory.poke(screenBase+i,0);
        let i = i+1;
      }

      return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
      let bColor = b;
      return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
      var int memVal;
      var int addr;
      var int bitposition;
      var int mask;

      let addr = screenBase + ((x/16)+(y*32));
      let bitposition = x -(16*(x/16));
      let memVal = Memory.peek(addr);
      if(bitposition<15)
      {
        let mask = Math.decOfBit(bitposition);
      }
      else
      {
        let mask = ~32767;
      }

      if(bColor) //black
      {
        let memVal = memVal|mask;
        do Memory.poke(addr,memVal);
      }
      else
      {
        let memVal = memVal&(~mask);
        do Memory.poke(addr,memVal);
      }

      return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int x,y,dx,dy;
      var boolean bNeg; //differentiation is negative
      var int a; //x direction increment
      var int b; // y direction increment
      var int adyminusbdx;
      var int tmp;
      let bNeg = false;

      if((((x1-x2+1)>0) &((y1-y2+1)>0)) |(((x1-x2-1)<0) &((y1-y2-1)<0)) )
      {
        let x = Math.min(x1,x2);
        let y = Math.min(y1,y2);
        let dx = Math.abs(x1-x2);
        let dy = Math.abs(y1-y2);
      }
      else
      {
        let bNeg = true;
        if((x1 <x2) & (y1>y2) )
        {
          let x = x1;
          let y=  y1;
          let dx = x2-x1;
          let dy = y2-y1; //negative 
        }
        else
        {
          let x= x2;
          let y= y2;
          let dx = x1-x2;
          let dy = y1-y2; //negative
        }
      }

      let a = 0;
      let b = 0;
      let adyminusbdx = 0;
     
      if((dx=0))
      {
        let tmp = y;
        while(y < (tmp+dy+1))
        {
          do Screen.drawPixel(x,y);
          let y= y+1;
        }
      }
      else
      {
        if(dy=0)
        {
          let tmp =x;
          while(x<(tmp+dx+1))
          {
            do Screen.drawPixel(x,y);
            let x = x+1;
          }
        }
        else
        {
          if(~bNeg)
          {
            while(((a-dx-1)<0) & ((b-dy-1)<0) )
            {
              do Screen.drawPixel(x+a,y+a);
              if(adyminusbdx < 0)
              {
                let b = b + 1;
                let adyminusbdx = adyminusbdx - dx;
              }
              else
              {
                let a = a + 1;
                let adyminusbdx = adyminusbdx + dy;
              }
            }

          }
          else
          {
            while(((a-dx-1)<0) & ((b-dy+1)>0) )
            {
              do Screen.drawPixel(x+a,y+b);
              if(adyminusbdx < 0)
              {
                let b = b - 1;
                let adyminusbdx = adyminusbdx + dx;
              }
              else
              {
                let a = a + 1;
                let adyminusbdx = adyminusbdx + dy;
              }
            }
          }
        }
      }

      return;

    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int i;
      var int j;

      let i =0;
      while(i<(y2-y1))
      {
        let j =0;
        while(j<(x2-x1))
        {
          do Screen.drawPixel(x1+j,y1+i);
          let j = j+1;
        }
        let i = i+1;
      }

      return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
      var int i;
      var int root;

      let i=-r;
      while(i<(r+1))
      {
        let root = Math.sqrt((r*r)-(i*i));
        do Screen.drawLine(cx-root,cy+i,cx+root,cy+i);
        let i = i+1;
      }

      return;
    }
}
