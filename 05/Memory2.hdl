// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	Not(in=address[14],out=outa);
	Not(in=address[13],out=notb);
	And(a=address[13],b=nota,out=load16);
	And(a=address[14],b=notb,out=loads);
	Or8Way(a=address[0],b=address[1],c=address[2],d=address[3],e=address[4],f=address[5],g=address[6],h=address[7],out=t1);
	Or8Way(a=address[8],b=address[9],c=address[10],d=address[11],e=address[12],f=false,g=false,h=false,out=oor);
	And(a=address[14],b=address[13],out=s1);
	And(a=s1,b=oor,c=loadk);
	And(a=s1,b=oor,out=t2);
	And(a=t2,b=loads,out=s0);
	RAM16K(in=in,address=address[0..13],load=load1,out=out16);
	Screen(in=in,address=address[0..12],load=loads,out=out8);
	Keyboard(out=outk);
	Mux4Way16(a=out16,b=out8,c=outk,d=false,sel[0]=s0,sel[1]=s1,out=out);
}
