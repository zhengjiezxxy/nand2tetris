// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	Mux16(a[15]=false,a[0..14]=instruction[0..14],b=ALUoutput,sel=instruction[15],out=RegAIn);
	And(a=instruction[5],b=instruction[15],out=and515);
	Not(in=instruction[15],out=not15);
	Or(a=not15,b=and515,out=RegALoad);
	ARegister(in=RegAIn,load=RegALoad,out=outAMux,out=outAPC,out[0..14]=addressM);
	Mux16(a=outAMux,b=inM,sel=instruction[12],out=AorM);
	ALU(x=RegDOut,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUoutput,out=outM,zr=zr,ng=ng);
	And(a=instruction[3],b=instruction[15],out=writeM);
	And(a=instruction[15],b=instruction[4],out=loadD);
	DRegister(in=ALUoutput,load=loadD,out=RegDOut);
	Not(in=instruction[2],out=notJ1);
	Not(in=zr,out=notzr);
	Not(in=ng,out=notng);
	And(a=notJ1,b=instruction[0],out=t1);
	And(a=t1,b=notzr,out=t2);
	And(a=t2,b=notng,out=m1);
	And(a=instruction[1],b=zr,out=t3);
	And(a=t3,b=notng,out=m2);
	And(a=instruction[2],b=notzr,out=t4);
	And(a=t4,b=ng,out=m3);
	And(a=instruction[2],b=instruction[0],out=t5);
	And(a=t5,b=notzr,out=m4);
	And(a=t5,b=instruction[1],out=m5);
	Or(a=m1,b=m2,out=n1);
	Or(a=n1,b=m3,out=n2);
	Or(a=n2,b=m4,out=n3);
	Or(a=n3,b=m5,out=loadPC);
	And(a=loadPC,b=instruction[15],out=loadPC1);
	PC(in=outAPC,inc=true,load=loadPC1,reset=reset,out[0..14]=pc);
}
